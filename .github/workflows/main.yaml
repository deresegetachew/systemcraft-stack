name: main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # so we control the push identity
      - uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}

      - uses: ./.github/actions/require-changeset

      - uses: ./.github/actions/build-lint-test

  codeql:
    uses: ./.github/workflows/codeql.yml
    permissions:
      # This permissions are required by codeql workflow
      security-events: write
      pull-requests: write
      contents: read
    with: 
      languages: 'javascript' # comma separated values code

  publish:
    needs: build
    name: publish
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      # Grants write access to the GitHub Actions workflow's OIDC token, enabling authentication with external services.
      id-token: write 
      pull-requests: write
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # so we control the push identity
      
      # Setup Node.js with pnpm
      - uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}

      # Import the GPG key into the runner
      - name: Import GPG key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

       # Configure git to sign commits/tags with the imported key for CI commits
      - name: Configure git signing
        run: |
          git config --global user.name  "deresegetachew"
          git config --global user.email "deresegetachew@gmail.com"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          git config --global gpg.program gpg
          git config --global user.signingkey ${{ steps.gpg.outputs.fingerprint }}
          git config --global user.useConfigOnly true # Ensures git uses the configured user.name and user.email only and not bot defaults
          echo "GIT_AUTHOR_NAME=deresegetachew" >> $GITHUB_ENV # Set env vars for commit author/committer
          echo "GIT_AUTHOR_EMAIL=deresegetachew@gmail.com" >> $GITHUB_ENV # Set env vars for commit author/committer
          echo "GIT_COMMITTER_NAME=deresegetachew" >> $GITHUB_ENV # Set env vars for commit author/committer
          echo "GIT_COMMITTER_EMAIL=deresegetachew@gmail.com" >> $GITHUB_ENV # Set env vars for commit author/committer

      # Set up authentication to push changes using the bot / pat token
      - name: Set up auth with bot token
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}.git

      # Debugging step to verify git identity configuration
      - name: Debug commit identity
        run: |
          echo "Git identity:"
          git config --get user.name
          git config --get user.email
          echo "Env identity:"
          env | grep -E 'GIT_(AUTHOR|COMMITTER)_' || true
      # Download build artifacts to the 'packages' directory
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-packages
          path: packages
      
     # Add a debugging step to list the contents of the packages directory
      - name: Debug downloaded artifacts
        run: |
          echo "Contents after artifact download:"
          find packages -name "*.js" -o -name "*.mjs" -o -name "*.d.ts" | head -10
          echo "Package directories:"
          ls -la packages/*/dist/ 2>/dev/null || echo "No dist directories found"

      # Create Release Pull Request or Publish
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: 'pnpm run release'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debugging step to show the latest commit with signature info
      - name: Show latest commit + signature
        run: |
          echo "Latest commit with signature info:"
          git --no-pager log -1 --pretty=full --show-signature