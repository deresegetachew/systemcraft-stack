name: main
on:
  workflow_run:
    workflows: ["Prepare"]
    types: [completed]
  push:
    branches: [ main ]
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
    branches: [ main ]

jobs:
  # Check if we should run (centralized condition)
  check-should-run:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check condition
        run: echo "Should run jobs:${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}"

  build:
    name: build
    needs: check-should-run
    if: ${{ needs.check-should-run.outputs.should-run == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false # so we control the push identity
      - uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}

      - uses: ./.github/actions/require-changeset
        with:
          skip-label: "[skip changeset check]"

      - uses: ./.github/actions/build-lint-test

  codeql:
    needs: check-should-run
    if: ${{ needs.check-should-run.outputs.should-run == 'true' }}
    uses: ./.github/workflows/codeql.yml
    permissions:
      # This permissions are required by codeql workflow
      security-events: write
      pull-requests: write
      contents: read
    with: 
      languages: 'javascript' # comma separated values code

  publish:
    needs: [check-should-run, build]
    name: publish
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-should-run.outputs.should-run == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      # Grants write access to the GitHub Actions workflow's OIDC token, enabling authentication with external services.
      id-token: write 
      pull-requests: write
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false # so we control the push identity
      
      # Setup Node.js with pnpm
      - uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}

       # Configure git identity and GPG signing for release commits
      - uses: ./.github/actions/setup-ci-git-identity
        with:
          purpose: 'GPG-signed release commits'
          git-user-name: ${{ vars.CI_GPG_USER_NAME }}
          git-user-email: ${{ vars.CI_GPG_USER_EMAIL }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Set up authentication to push changes using the bot / pat token
      - name: Set up auth with bot token
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}.git

      # Debugging step to verify git identity configuration
      - name: Debug commit identity
        run: |
          echo "Git identity:"
          git config --get user.name
          git config --get user.email
          echo "Env identity:"
          env | grep -E 'GIT_(AUTHOR|COMMITTER)_' || true
      # Download build artifacts to the 'packages' directory
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-packages
          path: packages
      
     # Add a debugging step to list the contents of the packages directory
      - name: Debug downloaded artifacts
        run: |
          echo "Contents after artifact download:"
          find packages -name "*.js" -o -name "*.mjs" -o -name "*.d.ts" | head -10
          echo "Package directories:"
          ls -la packages/*/dist/ 2>/dev/null || echo "No dist directories found"

      # Create Release Pull Request or Publish
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: 'pnpm run release'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debugging step to show the latest commit with signature info
      - name: Show latest commit + signature
        run: |
          echo "Latest commit with signature info:"
          git --no-pager log -1 --pretty=full --show-signature